Перем Отладка ;

Функция НайтиДок(ПДата,ППодр)
	з=Новый Запрос("ВЫБРАТЬ
	|	РеализацияККМ.Ссылка
	|ИЗ
	|	Документ.РеализацияККМ КАК РеализацияККМ
	|ГДЕ
	|	РеализацияККМ.Дата = &Дата
	|	И РеализацияККМ.Подразделение = &Подразделение");
	з.УстановитьПараметр("Дата",ПДата);
	з.УстановитьПараметр("Подразделение",ППодр);
	р=з.Выполнить().Выбрать();
	Если р.Следующий() Тогда
		Возврат р.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ОтрПродажи(Док, НовВариант=Ложь) Экспорт
	
	//«СписанияиОприходования» с операцией «Отрицательные продажи» и добавляет 
	//необходимые записи с необходимым количеством.
	//Документ «Списани и Оприходывания»всегда должен создавать на понедельник 
	//время 9-00, относительно документа «Реализация ККМ». То есть если документы 
	//	РеализацииККМ проводятся в период 24/10/11 по 30/10/11 до списание и 
	//	оприходывание создается ВСЕГДА на 24/10/11.
	//Если документ «Списания и оприходования» уже существует, то он добавляет 
	//в него записи.
	//Если в документе «Списания и оприходования» такая запись уже есть, то процедура 
	//просто увеличивает кол-во на нужную величину.
	//Проводим/перепроводим «Списание и оприходывание»
	//Проводим документы «Реализации ККМ»
	//Если в результате работы этого блока возникают какие-то не предвиденные ошибки. 
	//То должны остаться только созданные документы РеализацииККМ не проведенные как сейчас.
	//Алгоритм автоматического создания документов «Списания и Оприходывания» должен 
	//быть в процедуре приема, а не в процедуре проведения документа «Реализация ККМ» 
	//Документ «СписанияиОприходования» с операцией «Отрицательные продажи» должен 
	//существовать не более одного на неделю для каждого склада.
	
	//Док=Документы.РеализацияККМ.НайтиПоНомеру(Док.Номер, Док.Дата);
	ОшибкаКонтроля=ложь;
	ДатаО= Дата(Формат(НачалоНедели(Док.Дата),"ДФ=ггггММдд")+"090000");// дата нового СиО
	з=Новый Запрос("ВЫБРАТЬ
	|	к.Ссылка,
	|	к.Номенклатура,
	|	к.Количество,
	|	п.ОстатокКонечныйОстаток КАК Остаток,
	|	-(ЕСТЬNULL(п.ОстатокКонечныйОстаток, 0) - к.Количество) КАК Разница,
	|	ВЫБОР
	|		КОГДА к.КонтрольОстатка = ИСТИНА
	|			ТОГДА к.КонтрольОстатка
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КонтрольОстатка
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияККМОсновная.Ссылка КАК Ссылка,
	|		РеализацияККМОсновная.Номенклатура КАК Номенклатура,
	|		СУММА(РеализацияККМОсновная.Количество) КАК Количество,
	|		КассыГруппыВыгрузок.КонтрольОстатка КАК КонтрольОстатка
	|	ИЗ
	|		Документ.РеализацияККМ.Основная КАК РеализацияККМОсновная
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кассы.ГруппыВыгрузок КАК КассыГруппыВыгрузок
	|			ПО РеализацияККМОсновная.Ссылка.Касса = КассыГруппыВыгрузок.Ссылка
	|				И РеализацияККМОсновная.Номенклатура.Родитель.Родитель.Родитель = КассыГруппыВыгрузок.Класс
	|	ГДЕ
	|		РеализацияККМОсновная.Ссылка = &Док
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РеализацияККМОсновная.Ссылка,
	|		РеализацияККМОсновная.Номенклатура,
	|		КассыГруппыВыгрузок.КонтрольОстатка) КАК к
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииНоменклатуры.ОстаткиИОбороты(
	|				&Дата,
	|				&Дата,
	|				,
	|				,
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							Документ.РеализацияККМ.Основная.Номенклатура
	|						ИЗ
	|							Документ.РеализацияККМ.Основная
	|						ГДЕ
	|							Документ.РеализацияККМ.Основная.Ссылка = &Док)) КАК п
	|		ПО к.Номенклатура = п.Номенклатура
	|ГДЕ
	|	к.Ссылка = &Док
	|	И ЕСТЬNULL(п.ОстатокКонечныйОстаток, 0) - к.Количество < 0");
	з.УстановитьПараметр("Дата",Док.Дата);
	з.УстановитьПараметр("Док", Док.Ссылка);
	з.УстановитьПараметр("Склад",Док.Склад);
	р=з.Выполнить().Выгрузить();
	Если р.Количество()=0 Тогда 
		Попытка
			Док.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);//**//
		Исключение
			#Если Сервер Тогда
				ЗаписьЖурналаРегистрации("ОтрПродажи_ОшибкаПроведения_НетОтрицаловки", УровеньЖурналаРегистрации.Ошибка,,Док, ОписаниеОшибки());  
			#Иначе
				Сообщить(ОписаниеОшибки());
			#КонецЕсли		
		КонецПопытки;
		Возврат Истина; 
	КонецЕсли;
	
	Если НЕ НовВариант Тогда /////////////////////////////////
		
		з.Текст="ВЫБРАТЬ
		|	о.Ссылка,
		|	о.Номенклатура,
		|	о.Количество,
		|	о.Номенклатура2,
		|	о.Количество2
		|ИЗ
		|	Документ.СписаниеИОприходование.Опись КАК о
		|ГДЕ
		|	о.Ссылка.Дата = &Дата
		|	И о.Ссылка.Склад = &Склад
		|	И о.Ссылка.Операция = &Операция";
		з.УстановитьПараметр("Дата",ДатаО);		
		з.УстановитьПараметр("Операция",Перечисления.СписаниеОприходованиеОперации.ОтрицательныеПродажи);
		д=з.Выполнить().Выгрузить();
		Если НЕ д.Количество()=0 тогда
			о=д[0].Ссылка.ПолучитьОбъект();
		Иначе
			о=Документы.СписаниеИОприходование.СоздатьДокумент();
			о.Дата=ДатаО;
			о.Операция=Перечисления.СписаниеОприходованиеОперации.ОтрицательныеПродажи;
			//орг о.Организация=Справочники.Организации.НашаФирма;	
			о.Склад=Док.Склад;
			о.Автор=Док.Автор;
			о.УстановитьНовыйНомер("ФМ-ИС-");
		КонецЕсли;
		Для Каждого с Из р Цикл
			Стр  = о.Опись.Найти(с.Номенклатура,"Номенклатура2");
			Если Стр = Неопределено Тогда
				Стр=о.Опись.Добавить();
				Стр.Номенклатура2=с.Номенклатура;
			КонецЕсли;
			Стр.Количество=Стр.Количество+с.Разница;
			Стр.Комментарий = Док.Номер+"; "+Строка(Стр.Комментарий);
		КонецЦикла;
		
	Иначе ///////////////////////////////	
		
		з.Текст="ВЫБРАТЬ
		|	о.Ссылка,
		|	о.Номенклатура,
		|	о.Количество
		|ИЗ
		|	Документ.Перемещение.Основная КАК о
		|ГДЕ
		|	о.Ссылка.Дата = &Дата
		|	И о.Ссылка.СкладП = &Склад
		|	И о.Ссылка.СкладО = &СкладО";
		з.УстановитьПараметр("Дата",ДатаО);
		з.УстановитьПараметр("СкладО",Справочники.Склады.НайтиПоКоду(24));
		д=з.Выполнить().Выгрузить();
		Если НЕ д.Количество()=0 тогда
			о=д[0].Ссылка.ПолучитьОбъект();
		Иначе
			о=Документы.Перемещение.СоздатьДокумент();
			о.Дата=ДатаО;
			о.СкладО=Справочники.Склады.НайтиПоКоду(24);
			//орг о.Организация=Справочники.Организации.НашаФирма;	
			о.СкладП=Док.Склад;
			о.Автор=Док.Автор;
			о.УстановитьНовыйНомер("ФМ-ПТ-");
		КонецЕсли;
		Для Каждого с Из р Цикл
			//Проверка на необходимость добавления отрицательной продажи в перемещение. Если Контроль остатка установлен то эти товары не добавляем,
			//а у станавливаем переменную ОшибкаКонтроля =ИСТИНА, значить документ реализации проводить нельзя.
			Если НЕ с.КонтрольОстатка Тогда
				Стр  = о.Основная.Найти(с.Номенклатура,"Номенклатура");
				Если Стр = Неопределено Тогда
					Стр=о.Основная.Добавить();
					Стр.Номенклатура=с.Номенклатура;
				КонецЕсли;
				Стр.Количество=Стр.Количество+с.Разница;
			Иначе
				ОшибкаКонтроля=Истина;
				#Если Клиент Тогда 
					Сообщить("Ошибка контроля остатка. Отрицательная продажа " + с.Номенклатура.Код +" / "+с.Номенклатура.Наименование);
				#Иначе	
					ЗаписьЖурналаРегистрации("ОтрПродажи_ОшибкаКонтроляОстатков", УровеньЖурналаРегистрации.Ошибка,,о.Ссылка,);  					
				#КонецЕсли	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; /////////////////////////
	
	ошибка=Ложь;
	Попытка
		о.Записать(РежимЗаписиДокумента.Проведение); //**//
	Исключение
		#Если Сервер Тогда
			ЗаписьЖурналаРегистрации("ОтрПродажи_ОшибкаПроведения_ПриОбработке1", УровеньЖурналаРегистрации.Ошибка,,о.Ссылка, ОписаниеОшибки());  
		#Иначе
			Сообщить(ОписаниеОшибки());
		#КонецЕсли		
		ошибка=Истина;
	КонецПопытки;
	Если ОшибкаКонтроля=Ложь Тогда
		Если НЕ ошибка Тогда
			Попытка
				Док.ПолучитьОбъект().Записать(РежимЗаписиДокумента.Проведение);//**//
			Исключение
				#Если Сервер Тогда
					ЗаписьЖурналаРегистрации("ОтрПродажи_ОшибкаПроведения_ПриОбработке2", УровеньЖурналаРегистрации.Ошибка,,Док, ОписаниеОшибки());  
				#Иначе
					Сообщить(ОписаниеОшибки());
				#КонецЕсли		
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция обЗначение_НеЗаполнено(Значение) Экспорт
	Результат=Ложь;
	ТипЗначения=ТипЗнч(Значение);
	Если Значение=Неопределено Тогда
		Результат=Истина;
	ИначеЕсли Значение=NULL Тогда
		Результат=Истина;
	ИначеЕсли ТипЗначения=Тип("Строка") Тогда
		Если СокрЛП(Значение)="" Тогда
			Результат=Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения=Тип("Число") Тогда
		Если Значение=0 Тогда
			Результат=Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения=Тип("Дата") Тогда
		Если Значение=Дата('00010101') Тогда
			Результат=Истина;
		КонецЕсли; 
	ИначеЕсли ТипЗначения=Тип("Булево") Тогда
		Результат=Ложь;
	Иначе
		Если Значение=Новый(ТипЗначения) Тогда
			Результат=Истина;
		КонецЕсли; 
	КонецЕсли; 
	Возврат Результат;
КонецФункции

Функция ПолучитьСчет2с(Дата, Касса, СпособПлатежа)
	Р = РегистрыСведений.СпособОплаты.ПолучитьПоследнее(Дата, Новый Структура("Касса,СпособОплаты",Касса,СпособПлатежа));
	Если Не обЗначение_НеЗаполнено(Р.СчетКасса) Тогда
		Кмм = Р.ПроцентКомиссии;
		Возврат Р.СчетКасса;
	Иначе		
		Возврат Справочники.Счета.ПустаяСсылка();
	КонецЕсли;
КонецФункции

Функция Найти_Номенклатуру(ШтрихКод)
	
	МойЗапрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШтрихКодыНоменклатуры.Ссылка КАК Номенклатура,
	|	ШтрихКодыНоменклатуры.ШтрихКод КАК ШтрихКод,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура.ШтрихКоды КАК ШтрихКодыНоменклатуры
	|ГДЕ
	|	ШтрихКодыНоменклатуры.ШтрихКод = &ШК");	
	МойЗапрос.УстановитьПараметр("ШК",ШтрихКод);
	РезЗап=МойЗапрос.Выполнить().Выбрать();
	Если РезЗап.Следующий() Тогда
		Возврат(РезЗап.Номенклатура);
	Иначе
		Возврат(Неопределено);
	КонецЕсли; 
	
КонецФункции

////+++
//// Исходная процедура 
////+++
//Функция ИмпортЧеков0(ИмяФайла, Проводить=Истина) Экспорт 
//	
//	_ИмяРабочегоФайла=КаталогВременныхФайлов() +"rKKM.dbf";
//	КаталогАрхива = "\\Server-Home\Common\Ftp\Arhiv\rep";
//	КопироватьФайл(ИмяФайла,_ИмяРабочегоФайла);
//	XBase  = Новый XBase;
//	XBase.Кодировка = КодировкаXBase.ANSI;
//	Попытка
//		XBase.ОткрытьФайл(_ИмяРабочегоФайла);
//	Исключение
//		#Если Сервер Тогда
//			ЗаписьЖурналаРегистрации("ИмпортЧеков_ОшибкаОткрытияDBF", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());  
//		#Иначе
//			Сообщить(ОписаниеОшибки());
//		#КонецЕсли
//		Возврат(Ложь);
//	КонецПопытки;
//	
//	Записывать=Истина;
//	
//	ДОК=Документы.РеализацияККМ.СоздатьДокумент();
//	ДОК.НовыйДокумент();
//	ф=Новый Файл(ИмяФайла);
//	ДОК.Примечание =  ф.Имя;
//	Док.УстановитьНовыйНомер("ФМ-РК-");
//	ДОК.Контрагент=Константы.ОснРознПок.Получить();
//	ДОК.Операция=Перечисления.ВидПродажККМ.РозничнаяПродажа;
//	
//	Рез = XBase.Первая();СЧ=0;Кол=XBase.КоличествоЗаписей();
//	_СуммаП=0;_СуммаФ=0;_СуммаСС=0;СуммоваяСкидка=0;
//	НоваяСтрокаЧеки=Неопределено;
//	НоваяСтрокаТовары=Неопределено;
//	Инф = "";
//	
//	Пока Не XBase.ВКонце() Цикл
//		сч=сч+1;
//		#Если Клиент Тогда 
//			Состояние("Обработка строки "+сч+"/"+Кол);
//			ОбработкаПрерыванияПользователя();
//		#КонецЕсли	
//		Если ДОК.Касса.Пустая() Тогда
//			
//			Попытка
//				ДОК.Касса=Справочники.Кассы.НайтиПоРеквизиту("ЗаводскойН",XBase.KASSA);
//				ДОК.ZОтчет = СтрЗаменить(Строка(XBase.ZNUM),Символы.НПП,""); //был Kassir
//				мс=СтрокуВМассив(ИмяФайла,"_");
//				й="rep_"+мс[мс.Количество()-2]+"_"+мс[мс.Количество()-1];
//				ДОК.Дата=Дата(Сред(й,5,2)+"."+Сред(й,7,2)+"."+Сред(й,9,4)+" "+Сред(й,14,2)+":"+Сред(й,16,2)+":"+Сред(й,18,2));
//			Исключение
//				Попытка
//					ДОК.Дата=XBase.DATEO;
//					Док.УстановитьНовыйНомер("ФМ-РК-");
//					Инф = "Из имени файла отчета ККМ не удалось извлечь дату и время документа, поэтому она была взята из отчета("+XBase.DATEO+")";
//					#Если Клиент Тогда 
//						Сообщить(Инф,СтатусСообщения.Внимание);
//					#Иначе	
//						ЗаписьЖурналаРегистрации("ИмпортЧеков_Предупреждение", УровеньЖурналаРегистрации.Предупреждение,,, Инф);  
//					#КонецЕсли	
//				Исключение
//					#Если Клиент Тогда 
//						Сообщить(ОписаниеОшибки());
//					#Иначе	
//						ЗаписьЖурналаРегистрации("ИмпортЧеков_ОшибкаОткрытияDBF", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());  	
//					#КонецЕсли	
//				КонецПопытки;	
//			КонецПопытки;
//			
//			Если НЕ Строка(ДОК.Касса)="" Тогда
//				юл=РегистрыСведений.ПодразделениеУКассы.СрезПоследних(ДОК.Дата,Новый Структура("Касса",ДОК.Касса));
//				Если юл.Количество()>0 Тогда
//					ДОК.ЮрЛицо=юл[0].ЮрЛицо; 
//				КонецЕсли;
//			КонецЕсли;
//			
//			_Склады=РегистрыСведений.ПодразделениеУКассы.СрезПоследних(ДОК.Дата,Новый Структура("Касса",ДОК.Касса));
//			Если _Склады.Количество()>0 Тогда
//				ДОК.Склад=_Склады[0].ПодразделениеСклад;
//				ДОК.Подразделение=ДОК.Склад.Подразделение;
//			КонецЕсли; 
//			///			
//		КонецЕсли; 
//		
//		//Обработка строк
//		_Опер=СокрЛП(XBase.OPER);
//		
//		Если _Опер="#" или Найти(_Опер,"#")=1 Тогда
//		ИначеЕсли Лев(_Опер,3)="+s-" ИЛИ Лев(_Опер,3)="+s+" Тогда // Суммовая скидка (или наценка) на чек
//			СуммоваяСкидка=СуммоваяСкидка+XBase.SUMD  //Сделано прибавление так как учитваетсявозможная сумма в строках
//		ИначеЕсли Лев(_Опер,1)="+" или Лев(_Опер,1)="-" Тогда //Операция продажи или возврата
//			
//			Если Лев(_Опер,3)="-s-" или Лев(_Опер,3)="-s+" Тогда // Суммовая скидка (наценка) на чек (возврат)
//				СуммоваяСкидка=СуммоваяСкидка+XBase.SUMD;
//			ИначеЕсли XBase.Code="2200000040749" Тогда //Суммовая скидка строки не добавляем, увеличиваем только сумму
//				СуммоваяСкидка=СуммоваяСкидка+XBase.SUMD;
//			ИначеЕсли
//				XBase.Code="2200000108494" или XBase.Code="2200000108500" Тогда //Акция на август 2017 в строки не добавляем
//				//ничего не делаем
//				_СуммаФ=_СуммаФ+XBase.SUMD; //Добавляем суммовую скидку
//			Иначе
//				НоваяСтрокаТовары=ДОК.Основная.Добавить();
//				НоваяСтрокаТовары.Номер=XBase.CheckNum;
//				х = Неопределено;
//				_ном=Найти_Номенклатуру(XBase.Code);
//				Если _ном=Неопределено Тогда
//					_ном = Справочники.Номенклатура.НайтиПоКоду(Число(XBase.Code));
//					Если _ном = Справочники.Номенклатура.ПустаяСсылка() Тогда
//						Инф = Символы.Таб+"В строке №"+сч+" по штрих-коду "+XBase.Code+" не найдена номенклатура """+СокрЛП(XBase.NAME)+"""";
//						#Если Сервер Тогда
//							ЗаписьЖурналаРегистрации("ИмпортЧеков_НеНайденаНоменклатура", УровеньЖурналаРегистрации.Ошибка,,, Инф);  
//						#Иначе
//							Сообщить(Инф,СтатусСообщения.Внимание);
//						#КонецЕсли
//						Записывать=Ложь;
//					КонецЕсли;
//				КонецЕсли; 
//				НоваяСтрокаТовары.Номенклатура=_ном;
//				_СС=0;
//				Если НЕ ПустаяСтрока(XBase.CLIENT) Тогда
//					_Дисконт=XBase.CLIENT;
//				Иначе
//					_Дисконт="";
//				КонецЕсли;
//				НоваяСтрокаТовары.Количество=XBase.KOL;
//				Если Найти(_Опер,"%")>0 Тогда
//					НоваяСтрокаТовары.СуммаПродажная=XBase.PRICE*XBase.KOL;
//					НоваяСтрокаТовары.СуммаФактическая=XBase.SUMD;
//					НоваяСтрокаТовары.СуммаСебестоимости=0;
//					НоваяСтрокаТовары.ПроцентСкидки=XBase.SkidProc;
//				Иначе
//					НоваяСтрокаТовары.Количество=XBase.KOL;
//					НоваяСтрокаТовары.СуммаПродажная=XBase.PRICE*XBase.KOL;
//					НоваяСтрокаТовары.СуммаФактическая=XBase.SUMD;
//					НоваяСтрокаТовары.СуммаСебестоимости=_СС;
//					НоваяСтрокаТовары.ПроцентСкидки=XBase.SkidProc;
//				КонецЕсли; 
//				_СуммаП=_СуммаП+НоваяСтрокаТовары.СуммаПродажная;
//				_СуммаФ=_СуммаФ+НоваяСтрокаТовары.СуммаФактическая;
//				_СуммаСС=_СуммаСС+НоваяСтрокаТовары.СуммаСебестоимости;
//			КонецЕсли;
//			
//		ИначеЕсли (_Опер="$n" или _Опер="$c" или _Опер="$k" или _Опер="$b" или _Опер="$t") Тогда 
//			Если XBase.PRICE<>0 Тогда
//				НоваяСтрокаЧеки=ДОК.Чеки.Добавить();
//				НоваяСтрокаЧеки.Номер=XBase.CheckNum;
//				//АВ прием поименно кассиров				
//				КассирСсылка=Справочники.Сотрудники.НайтиПоКоду(XBase.Kassir);
//				Если КассирСсылка.Пустая() 
//					Тогда
//					НоваяСтрокаЧеки.Смена=XBase.Kassir;
//				Иначе 
//					НоваяСтрокаЧеки.Смена= КассирСсылка;
//				КонецЕсли;
//				
//				НоваяСтрокаЧеки.Дата=Дата(XBase.DateO+XBase.TimeO);
//				Если не ПустаяСтрока(XBase.CLIENT) Тогда // в зависимости от версии касовой программы номер банковской карты выгружается в разные поля. В доп инфор номер полный.
//					НоваяСтрокаЧеки.КартаПлатежа=XBase.CLIENT;
//				Иначе
//					НоваяСтрокаЧеки.КартаПлатежа=XBase.DOPINFO;
//				КонецЕсли;
//				Если не _Дисконт="" Тогда
//					НоваяСтрокаЧеки.ДискКарт=Справочники.ДисконтныеКарты.НайтиПоНаименованию(_Дисконт);
//				КонецЕсли;	
//				НоваяСтрокаЧеки.Операция=?(XBASE.Price<0,Перечисления.Операция.Возврат,Перечисления.Операция.Продажа);
//				_СуммаФ=_СуммаФ+СуммоваяСкидка; //Добавляем суммовую скидку
//				НоваяСтрокаЧеки.СуммаПродажная=_СуммаП;
//				НоваяСтрокаЧеки.СуммаФактическая=_СуммаФ;
//				НоваяСтрокаЧеки.СуммаСебестоимости=_СуммаСС;
//				СуммоваяСкидка=0; //Сбрасываем суммовую скидку для следующего чека.
//				Если _СуммаФ<>XBase.Price Тогда
//					А1 = Истина;
//					Если _Опер="$b" Тогда
//						XBase.Следующая();   
//						Если СокрЛП(XBase.OPER) = "$n" Тогда
//							А1 = Ложь;
//							XBase.Предыдущая();
//							НоваяСтрокаЧеки.СуммаПродажная = XBase.Price;
//							НоваяСтрокаЧеки.СуммаФактическая = XBase.Price;
//						КонецЕсли;
//					ИначеЕсли _Опер = "$n" Тогда	
//						XBase.Предыдущая();
//						Если СокрЛП(XBase.OPER) = "$b" или СокрЛП(XBase.OPER)="$k" Тогда
//							А1 = Ложь;
//							XBase.Следующая();
//							НоваяСтрокаЧеки.СуммаПродажная = XBase.Price;
//							НоваяСтрокаЧеки.СуммаФактическая = XBase.Price;
//						КонецЕсли;
//					ИначеЕсли _Опер="$c" или _Опер="$k"  Тогда
//						XBase.Следующая();   
//						Если (СокрЛП(XBase.OPER) = "$c" or СокрЛП(XBase.OPER) = "$k") ИЛИ ( СокрЛП(XBase.OPER) = "$n" И XBase.Price = 0 ) ИЛИ ( СокрЛП(XBase.OPER) = "$n") Тогда // последняя непонятно!!!
//							А1 = Ложь;
//							XBase.Предыдущая();
//							НоваяСтрокаЧеки.СуммаПродажная = XBase.Price;
//							НоваяСтрокаЧеки.СуммаФактическая = XBase.Price;
//						КонецЕсли;
//					КонецЕсли;	
//					
//					Если А1 Тогда
//						Инф = Символы.Таб+"В строке №"+Сч+" итог суммы факт. за товары не совпадает с итоговой в чеке! "+XBase.CheckNum+" "+_СуммаФ+"("+XBase.Price+")";
//						#Если Клиент Тогда 
//							СООБЩИТЬ(Инф,СтатусСообщения.Важное);
//						#Иначе	
//							ЗаписьЖурналаРегистрации("ИмпортЧеков_ОшибкаНеСовпаденияСумм", УровеньЖурналаРегистрации.Ошибка,,,Инф);  			
//						#КонецЕсли	
//						Записывать=Ложь;
//						Прервать;
//					КонецЕсли;	
//					
//				КонецЕсли; 
//				
//				_СпособОплаты=Неопределено;
//				Если XBase.PAYCARD=-1 Тогда
//					_СпособОплаты=Перечисления.СпособОплаты.Нал;
//				ИначеЕсли XBase.PAYCARD=0 Тогда
//					_СпособОплаты=Перечисления.СпособОплаты.ЗолотаяКорона;
//					НоваяСтрокаЧеки.Счет = ПолучитьСчет2с(ДОК.Дата, ДОК.Касса, _СпособОплаты);
//				ИначеЕсли XBase.PAYCARD=1 Тогда
//					_СпособОплаты=Перечисления.СпособОплаты.СберКарт;
//					НоваяСтрокаЧеки.Счет = ПолучитьСчет2с(ДОК.Дата, ДОК.Касса, _СпособОплаты);
//				ИначеЕсли XBase.PAYCARD=3 ИЛИ XBase.PAYCARD=2 Тогда
//					_СпособОплаты=Перечисления.СпособОплаты.VisaMasterMaestro;
//					НоваяСтрокаЧеки.Счет = ПолучитьСчет2с(ДОК.Дата, ДОК.Касса, _СпособОплаты);
//				ИначеЕсли XBase.PAYCARD=4 Тогда
//					_СпособОплаты=Перечисления.СпособОплаты.Долина;
//					НоваяСтрокаЧеки.Счет = ПолучитьСчет2с(ДОК.Дата, ДОК.Касса, _СпособОплаты);
//				Иначе
//					Инф = "Встречена не обрабатываемый способ оплаты в строке №"+сч+".";
//					#Если Клиент Тогда 
//						Сообщить(Инф, СтатусСообщения.Внимание);
//					#Иначе	
//						ЗаписьЖурналаРегистрации("ИмпортЧеков_Предупреждение", УровеньЖурналаРегистрации.Предупреждение,,,Инф);  		
//					#КонецЕсли	
//					Записывать=Ложь;
//					Прервать;
//				КонецЕсли; 
//				НоваяСтрокаЧеки.СпособОплаты=_СпособОплаты;
//				_Дисконт=Справочники.ДисконтныеКарты.ПустаяСсылка();
//				_СуммаП=0;_СуммаФ=0;_СуммаСС=0;_СуммаВозврата=0;
//			КонецЕсли; 
//			
//		Иначе
//			Инф= "Встречена не обрабатываемая операция в строке №"+сч+".";
//			#Если Клиент Тогда 
//				Сообщить(Инф,СтатусСообщения.Внимание);
//			#Иначе	
//				ЗаписьЖурналаРегистрации("ИмпортЧеков_Предупреждение", УровеньЖурналаРегистрации.Предупреждение,,,Инф);  			
//			#КонецЕсли	
//			Записывать=Ложь;
//		КонецЕсли; 
//		XBase.Следующая();
//	КонецЦикла;
//	XBase.ЗакрытьФайл();
//	УдалитьФайлы(_ИмяРабочегоФайла);
//	Если Записывать Тогда
//		Попытка
//			ДОК.Основная.Свернуть("Номер,Номенклатура,ПроцентСкидки","Количество,СуммаПродажная,СуммаФактическая,СуммаСебестоимости");
//			Для каждого эл  Из ДОК.Основная Цикл
//				Если эл.СуммаПродажная=эл.СуммаФактическая Тогда
//					эл.ПроцентСкидки=0;
//				КонецЕсли; 
//				Если НЕ Эл.Количество = 0 Тогда 
//					Эл.Цена=Эл.СуммаФактическая/Эл.Количество;
//				КонецЕсли;	
//			КонецЦикла; 			
//			ДОК.Записать(); //**//
//			ПереместитьФайл(ИмяФайла,КаталогАрхива+"\"+ф.Имя);
//		Исключение
//			Записывать=ложь;
//			#Если Клиент Тогда 
//				Сообщить(Символы.Таб+"Ошибка записи документа "+ДОК+": "+ОписаниеОшибки(),СтатусСообщения.ОченьВажное);
//			#Иначе	
//				ЗаписьЖурналаРегистрации("ИмпортЧеков_ОшибкаЗаписиНовогоККМ", УровеньЖурналаРегистрации.Ошибка,,ДОК.Ссылка,"Ошибка записи документа "+ДОК+": "+ОписаниеОшибки());  			
//			#КонецЕсли	
//		КонецПопытки; 
//		#Если Клиент Тогда 
//			Сообщить(Символы.Таб+"Создан документ "+ДОК,СтатусСообщения.Информация);
//		#Иначе	
//			ЗаписьЖурналаРегистрации("ИмпортЧеков_СозданНовыйККМ", УровеньЖурналаРегистрации.Информация,,ДОК.Ссылка);  				
//		#КонецЕсли	
//	Иначе
//		Инф = "При загрузке "+ИмяФайла+" были найдены ошибки! Документ не создан!";
//		#Если Клиент Тогда 
//			Сообщить(Символы.Таб+Инф,СтатусСообщения.ОченьВажное);
//		#Иначе	
//			ЗаписьЖурналаРегистрации("ИмпортЧеков_НЕ_СозданНовыйККМ", УровеньЖурналаРегистрации.Ошибка,,,Инф);  					
//		#КонецЕсли	
//	КонецЕсли; 
//	
//	Если Записывать Тогда
//		Если Проводить Тогда
//			ОтрПродажи(Док.Ссылка, Истина);
//		КонецЕсли;	
//	КонецЕсли;
//	Возврат(Записывать);
//	
//КонецФункции

Функция ДатаОтчетаИзИмениФайла(ИмяФайлаОтчета)
	ОписаниеДатыВремени = Лев(Прав(ИмяФайлаОтчета,19),15) ;
	ДД = Число(Сред(ОписаниеДатыВремени,1,2));  
	ММ = Число(Сред(ОписаниеДатыВремени,3,2));  
	ГГГГ = Число(Сред(ОписаниеДатыВремени,5,4));  
	Час = Число(Сред(ОписаниеДатыВремени,10,2));  
	Мин = Число(Сред(ОписаниеДатыВремени,12,2));  
	Сек = Число(Сред(ОписаниеДатыВремени,14,2));  
	
	Возврат Дата(ГГГГ,ММ,ДД,Час,Мин,Сек) ; 
	
КонецФункции 

Функция ИмпортЧеков(ИмяФайла, Проводить=Истина) Экспорт 
	
	_ИмяРабочегоФайла=КаталогВременныхФайлов() +"rKKM.dbf";
	КаталогАрхива = "\\Server-Home\Common\Ftp\Arhiv\rep";
	///++++	Тест mike Yushkov
	Если Отладка Тогда 

	КаталогАрхива = "C:\obmen\arc";
	КонецЕсли ;
	///++++	
	КопироватьФайл(ИмяФайла,_ИмяРабочегоФайла);
	XBase  = Новый XBase;
	XBase.Кодировка = КодировкаXBase.ANSI;
	Попытка
		XBase.ОткрытьФайл(_ИмяРабочегоФайла);
	Исключение
		#Если Сервер Тогда
			ЗаписьЖурналаРегистрации("ИмпортЧеков_ОшибкаОткрытияDBF", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());  
		#Иначе
			Сообщить(ОписаниеОшибки());
		#КонецЕсли
		Возврат(Ложь);
	КонецПопытки;
	
	Записывать=Истина;
	
	ДОК=Документы.РеализацияККМ.СоздатьДокумент();
	//+++
	// Вызов из модуля документа 
	ДОК.НовыйДокумент();
	//+++
	
	ф=Новый Файл(ИмяФайла);
	ДОК.Примечание =  ф.Имя;
	Док.УстановитьНовыйНомер("ФМ-РК-");
	ДОК.Контрагент=Константы.ОснРознПок.Получить();
	ДОК.Операция=Перечисления.ВидПродажККМ.РозничнаяПродажа;
	
	Рез = XBase.Первая();СЧ=0;Кол=XBase.КоличествоЗаписей();
	_СуммаП=0;_СуммаФ=0;_СуммаСС=0;СуммоваяСкидка=0;
	НоваяСтрокаЧеки=Неопределено;
	НоваяСтрокаТовары=Неопределено;
	Инф = "";
	
	Пока Не XBase.ВКонце() Цикл
		сч=сч+1;
		//+++		
		//		#Если Клиент Тогда 
		//			Состояние("Обработка строки "+сч+"/"+Кол);
		//			ОбработкаПрерыванияПользователя();
		//		#КонецЕсли	
		//+++		
		Если ДОК.Касса.Пустая() Тогда
			
			Попытка
				ДОК.Касса=Справочники.Кассы.НайтиПоРеквизиту("ЗаводскойН",XBase.KASSA);
				ДОК.ZОтчет = Формат(XBase.ZNUM,"ЧДЦ=0; ЧГ=0")  ;
				Док.Дата = ДатаОтчетаИзИмениФайла(ИмяФайла);
				
			Исключение
				
				Попытка
					ДОК.Дата=XBase.DATEO;
					Док.УстановитьНовыйНомер("ФМ-РК-");
					Инф = "Из имени файла отчета ККМ не удалось извлечь дату и время документа, поэтому она была взята из отчета("+XBase.DATEO+")";
					#Если Клиент Тогда 
						Сообщить(Инф,СтатусСообщения.Внимание);
					#Иначе	
						ЗаписьЖурналаРегистрации("ИмпортЧеков_Предупреждение", УровеньЖурналаРегистрации.Предупреждение,,, Инф);  
					#КонецЕсли	
				Исключение
					#Если Клиент Тогда 
						Сообщить(ОписаниеОшибки());
					#Иначе	
						ЗаписьЖурналаРегистрации("ИмпортЧеков_ОшибкаОткрытияDBF", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки());  	
					#КонецЕсли	
				КонецПопытки;	
			КонецПопытки;
			
			Если НЕ Строка(ДОК.Касса)="" Тогда
				юл=РегистрыСведений.ПодразделениеУКассы.СрезПоследних(ДОК.Дата,Новый Структура("Касса",ДОК.Касса));
				Если юл.Количество()>0 Тогда
					ДОК.ЮрЛицо=юл[0].ЮрЛицо; 
				КонецЕсли;
			КонецЕсли;
			
			_Склады=РегистрыСведений.ПодразделениеУКассы.СрезПоследних(ДОК.Дата,Новый Структура("Касса",ДОК.Касса));
			Если _Склады.Количество()>0 Тогда
				ДОК.Склад=_Склады[0].ПодразделениеСклад;
				ДОК.Подразделение=ДОК.Склад.Подразделение;
			КонецЕсли; 
			///			
		КонецЕсли; 
		
		//Обработка строк
		_Опер=СокрЛП(XBase.OPER);
		
		Если _Опер="#" или Найти(_Опер,"#")=1 Тогда
		ИначеЕсли Лев(_Опер,3)="+s-" ИЛИ Лев(_Опер,3)="+s+" Тогда // Суммовая скидка (или наценка) на чек
	///++++	Исправление mike Yushkov
	//		СуммоваяСкидка=СуммоваяСкидка+XBase.SUMD  //Сделано прибавление так как учитваетсявозможная сумма в строках
			
            Если Не пустаяСтрока(XBase.Code) Тогда
			СуммоваяСкидка=СуммоваяСкидка+XBase.SUMD  //Сделано прибавление так как учитваетсявозможная сумма в строках
			КонецЕсли ;
	///++++	Исправление mike Yushkov
			
		ИначеЕсли Лев(_Опер,1)="+" или Лев(_Опер,1)="-" Тогда //Операция продажи или возврата
			
			Если Лев(_Опер,3)="-s-" или Лев(_Опер,3)="-s+" Тогда // Суммовая скидка (наценка) на чек (возврат)
				СуммоваяСкидка=СуммоваяСкидка+XBase.SUMD;
			ИначеЕсли XBase.Code="2200000040749" Тогда //Суммовая скидка строки не добавляем, увеличиваем только сумму
				СуммоваяСкидка=СуммоваяСкидка+XBase.SUMD;
			ИначеЕсли
				XBase.Code="2200000108494" или XBase.Code="2200000108500" Тогда //Акция на август 2017 в строки не добавляем
				//ничего не делаем
				_СуммаФ=_СуммаФ+XBase.SUMD; //Добавляем суммовую скидку
			Иначе
				//+++				
				Если Не ПустаяСтрока(XBase.Code) Тогда 
					//+++				
					НоваяСтрокаТовары=ДОК.Основная.Добавить();
					НоваяСтрокаТовары.Номер=XBase.CheckNum;
					х = Неопределено;
					_ном=Найти_Номенклатуру(XBase.Code);
					Если _ном=Неопределено Тогда
						_ном = Справочники.Номенклатура.НайтиПоКоду(Число(XBase.Code));
						Если _ном = Справочники.Номенклатура.ПустаяСсылка() Тогда
							Инф = Символы.Таб+"В строке №"+сч+" по штрих-коду "+XBase.Code+" не найдена номенклатура """+СокрЛП(XBase.NAME)+"""";
							#Если Сервер Тогда
								ЗаписьЖурналаРегистрации("ИмпортЧеков_НеНайденаНоменклатура", УровеньЖурналаРегистрации.Ошибка,,, Инф);  
							#Иначе
								Сообщить(Инф,СтатусСообщения.Внимание);
							#КонецЕсли
							Записывать=Ложь;
						КонецЕсли;
					КонецЕсли; 
					НоваяСтрокаТовары.Номенклатура=_ном;
					_СС=0;
					Если НЕ ПустаяСтрока(XBase.CLIENT) Тогда
						_Дисконт=XBase.CLIENT;
					Иначе
						_Дисконт="";
					КонецЕсли;
					НоваяСтрокаТовары.Количество=XBase.KOL;
					Если Найти(_Опер,"%")>0 Тогда
						НоваяСтрокаТовары.СуммаПродажная=XBase.PRICE*XBase.KOL;
						НоваяСтрокаТовары.СуммаФактическая=XBase.SUMD;
						НоваяСтрокаТовары.СуммаСебестоимости=0;
						НоваяСтрокаТовары.ПроцентСкидки=XBase.SkidProc;
					Иначе
						НоваяСтрокаТовары.Количество=XBase.KOL;
						НоваяСтрокаТовары.СуммаПродажная=XBase.PRICE*XBase.KOL;
						НоваяСтрокаТовары.СуммаФактическая=XBase.SUMD;
						НоваяСтрокаТовары.СуммаСебестоимости=_СС;
						НоваяСтрокаТовары.ПроцентСкидки=XBase.SkidProc;
					КонецЕсли; 
					_СуммаП=_СуммаП+НоваяСтрокаТовары.СуммаПродажная;
					_СуммаФ=_СуммаФ+НоваяСтрокаТовары.СуммаФактическая;
					_СуммаСС=_СуммаСС+НоваяСтрокаТовары.СуммаСебестоимости;
					//+++				
				КонецЕсли ;
				//+++				
				
			КонецЕсли;
			
		ИначеЕсли (_Опер="$n" или _Опер="$c" или _Опер="$k" или  _Опер="$t") Тогда 
			
			ДобавляемСтрокуВЧеки = XBase.PRICE<>0 ;
			
			Если XBase.PRICE = 0 И _Опер="$n"  Тогда 
				// Наличная оплата , Если нет данных по оплате , добалвяем принудительно 
				ПараметрыПоиска = Новый Структура("Номер",XBase.CheckNum) ;  ;
				ДобавляемСтрокуВЧеки = ДОК.Чеки.НайтиСтроки(ПараметрыПоиска).Количество() =0 ; 
			КонецЕсли ;	
			
			Если ДобавляемСтрокуВЧеки  Тогда
				
				НоваяСтрокаЧеки=ДОК.Чеки.Добавить();
				НоваяСтрокаЧеки.Номер=XBase.CheckNum;
				
				//АВ прием поименно кассиров				
				КассирСсылка=Справочники.Сотрудники.НайтиПоКоду(XBase.Kassir);
				
				Если КассирСсылка.Пустая() Тогда
					НоваяСтрокаЧеки.Смена=XBase.Kassir;
				Иначе 
					НоваяСтрокаЧеки.Смена= КассирСсылка;
				КонецЕсли;
				
				НоваяСтрокаЧеки.Дата=Дата(XBase.DateO+XBase.TimeO);
				
				Если не ПустаяСтрока(XBase.CLIENT) Тогда // в зависимости от версии касовой программы номер банковской карты выгружается в разные поля. В доп инфор номер полный.
					НоваяСтрокаЧеки.КартаПлатежа=XBase.CLIENT;
				Иначе
					НоваяСтрокаЧеки.КартаПлатежа=XBase.DOPINFO;
				КонецЕсли;
				
				Если не _Дисконт="" Тогда
					НоваяСтрокаЧеки.ДискКарт=Справочники.ДисконтныеКарты.НайтиПоНаименованию(_Дисконт);
				КонецЕсли;	
				
				НоваяСтрокаЧеки.Операция=?(XBASE.Price<0,Перечисления.Операция.Возврат,Перечисления.Операция.Продажа);
				
				_СуммаФ=_СуммаФ+СуммоваяСкидка; //Добавляем суммовую скидку
				
				НоваяСтрокаЧеки.СуммаПродажная=_СуммаП;
				НоваяСтрокаЧеки.СуммаФактическая=_СуммаФ;
				НоваяСтрокаЧеки.СуммаСебестоимости=_СуммаСС;
				
				Если _СуммаФ<>XBase.Price Тогда
					Если _Опер = "$n" Тогда	
						НоваяСтрокаЧеки.СуммаПродажная = XBase.Price;
						НоваяСтрокаЧеки.СуммаФактическая = XBase.Price;
					ИначеЕсли _Опер="$c" или _Опер="$k"  Тогда
						НоваяСтрокаЧеки.СуммаПродажная = XBase.Price;
						НоваяСтрокаЧеки.СуммаФактическая = XBase.Price;
						//ИначеЕсли _Опер="$b"   Тогда
						//	НоваяСтрокаЧеки.СуммаПродажная = XBase.Price;
						//	НоваяСтрокаЧеки.СуммаФактическая = 0;
						
					КонецЕсли;	
				КонецЕсли; 
				
				СуммоваяСкидка=0; //Сбрасываем суммовую скидку для следующего чека.
				
				_СпособОплаты=Неопределено;
				Если XBase.PAYCARD=-1 Тогда
					_СпособОплаты=Перечисления.СпособОплаты.Нал;
				ИначеЕсли XBase.PAYCARD=0 Тогда
					_СпособОплаты=Перечисления.СпособОплаты.ЗолотаяКорона;
					НоваяСтрокаЧеки.Счет = ПолучитьСчет2с(ДОК.Дата, ДОК.Касса, _СпособОплаты);
				ИначеЕсли XBase.PAYCARD=1 Тогда
					_СпособОплаты=Перечисления.СпособОплаты.СберКарт;
					НоваяСтрокаЧеки.Счет = ПолучитьСчет2с(ДОК.Дата, ДОК.Касса, _СпособОплаты);
				ИначеЕсли XBase.PAYCARD=3 ИЛИ XBase.PAYCARD=2 Тогда
					_СпособОплаты=Перечисления.СпособОплаты.VisaMasterMaestro;
					НоваяСтрокаЧеки.Счет = ПолучитьСчет2с(ДОК.Дата, ДОК.Касса, _СпособОплаты);
				ИначеЕсли XBase.PAYCARD=4 Тогда
					_СпособОплаты=Перечисления.СпособОплаты.Долина;
					НоваяСтрокаЧеки.Счет = ПолучитьСчет2с(ДОК.Дата, ДОК.Касса, _СпособОплаты);
				Иначе
					Инф = "Встречен не обрабатываемый способ оплаты в строке № "+сч+" .";
					#Если Клиент Тогда 
						Сообщить(Инф, СтатусСообщения.Внимание);
					#Иначе	
						ЗаписьЖурналаРегистрации("ИмпортЧеков_Предупреждение", УровеньЖурналаРегистрации.Предупреждение,,,Инф);  		
					#КонецЕсли	
					Записывать=Ложь;
					Прервать;
				КонецЕсли; 
				НоваяСтрокаЧеки.СпособОплаты=_СпособОплаты;
				_Дисконт=Справочники.ДисконтныеКарты.ПустаяСсылка();
				_СуммаП=0;_СуммаФ=0;_СуммаСС=0;_СуммаВозврата=0;
			КонецЕсли; 
		ИначеЕсли  _Опер = "/a+" или _Опер = "/a-" или _Опер="$b" Тогда 
			// Отражение операций бонусами на карту начислнеия , списания, оплаты   
			// Пропускаем 
		Иначе
			Инф= "Встречена не обрабатываемая операция в строке №"+сч+".";
			#Если Клиент Тогда 
				Сообщить(Инф,СтатусСообщения.Внимание);
			#Иначе	
				ЗаписьЖурналаРегистрации("ИмпортЧеков_Предупреждение", УровеньЖурналаРегистрации.Предупреждение,,,Инф);  			
			#КонецЕсли	
			Записывать=Ложь;
		КонецЕсли; 
		XBase.Следующая();
	КонецЦикла;
	XBase.ЗакрытьФайл();
	УдалитьФайлы(_ИмяРабочегоФайла);
	Если Записывать Тогда
		Попытка
			ДОК.Основная.Свернуть("Номер,Номенклатура,ПроцентСкидки","Количество,СуммаПродажная,СуммаФактическая,СуммаСебестоимости");
			Для каждого эл  Из ДОК.Основная Цикл
				Если эл.СуммаПродажная=эл.СуммаФактическая Тогда
					эл.ПроцентСкидки=0;
				КонецЕсли; 
				Если НЕ Эл.Количество = 0 Тогда 
					Эл.Цена=Эл.СуммаФактическая/Эл.Количество;
				КонецЕсли;	
			КонецЦикла; 			
			ДОК.Записать(); //**//
			ПереместитьФайл(ИмяФайла,КаталогАрхива+"\"+ф.Имя);
		Исключение
			Записывать=ложь;
			#Если Клиент Тогда 
				Сообщить(Символы.Таб+"Ошибка записи документа "+ДОК+": "+ОписаниеОшибки(),СтатусСообщения.ОченьВажное);
			#Иначе	
				ЗаписьЖурналаРегистрации("ИмпортЧеков_ОшибкаЗаписиНовогоККМ", УровеньЖурналаРегистрации.Ошибка,,ДОК.Ссылка,"Ошибка записи документа "+ДОК+": "+ОписаниеОшибки());  			
			#КонецЕсли	
		КонецПопытки; 
		#Если Клиент Тогда 
			Сообщить(Символы.Таб+"Создан документ "+ДОК,СтатусСообщения.Информация);
		#Иначе	
			ЗаписьЖурналаРегистрации("ИмпортЧеков_СозданНовыйККМ", УровеньЖурналаРегистрации.Информация,,ДОК.Ссылка);  				
		#КонецЕсли	
	Иначе
		Инф = "При загрузке "+ИмяФайла+" были найдены ошибки! Документ не создан!";
		#Если Клиент Тогда 
			Сообщить(Символы.Таб+Инф,СтатусСообщения.ОченьВажное);
		#Иначе	
			ЗаписьЖурналаРегистрации("ИмпортЧеков_НЕ_СозданНовыйККМ", УровеньЖурналаРегистрации.Ошибка,,,Инф);  					
		#КонецЕсли	
	КонецЕсли; 
	
	Если Записывать Тогда
		Если Проводить Тогда
			ОтрПродажи(Док.Ссылка, Истина);
		КонецЕсли;	
	КонецЕсли;
	Возврат(Записывать);
	
КонецФункции

Процедура ДатьЗагрузкуИзТоргСервиса(Инфо) Экспорт 
	Сообщить("Поехали");
	
	//#Если НЕ Клиент Тогда
	//	ЗаписьЖурналаРегистрации("ДатьЗагрузкуИзТоргСервиса_Пользователь", УровеньЖурналаРегистрации.Информация,,, ""+ ИмяПользователя()+"("+Пользователь_ОС() +")");
	//#КонецЕсли
	//Проверка доступа к папке обмена
	//+++ Модификация Юшков Михаил Гамбит 
	// Было : 
	// ф = Новый Файл("\\Server-Home\Common\Ftp\Import");
	//стало :  
	ОбщийКаталогИмпорта = "\\Server-Home\Common\Ftp\Import"  ;
///++++	Тест mike Yushkov
		Если Отладка Тогда 

	ОбщийКаталогИмпорта = "C:\obmen"  ;
	КонецЕсли ;
///++++	Тест mike Yushkov
	
	ф = Новый Файл(ОбщийКаталогИмпорта);
	//+++ Модификация Юшков Михаил Гамбит 
	
	
	Если НЕ ф.Существует() тогда
		#Если Клиент Тогда
			ош="У пользователя "+ ИмяПользователя()+"("+Пользователь_ОС() +") нет доступа к каталогу "+ф.ПолноеИмя;
			Сообщить(ош, СтатусСообщения.Информация);
		#Иначе
			ЗаписьЖурналаРегистрации("ДатьЗагрузкуИзТоргСервиса_ОшибкаДоступаКаталога", УровеньЖурналаРегистрации.Ошибка,,,);  
		#КонецЕсли
		Возврат;
	КонецЕсли;	
	
	//При запуске вручну в эту процедуру передается массив файлов для примем условия тогда отрабатывается при приеме пользователем
	//условие иначе при приеме сервером
	Если ТипЗнч(Инфо)=Тип("ТаблицаЗначений") Тогда
		ФАЙЛЫ=Инфо;
		
		Для каждого файл Из ФАЙЛЫ Цикл
			Если НЕ файл.Пометка Тогда
				Если НЕ файл.Прием Тогда 
					Продолжить; 
				ИначеЕсли НЕ Строка(файл.РеализацияККМ)="" Тогда //тут отрабатывается переприем документа
					д=файл.РеализацияККМ.ПолучитьОбъект();
					д.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					д.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
				#Если Клиент Тогда
					Сообщить("ЗАГРУЗКА ФАЙЛА: "+файл.ПолноеИмя,СтатусСообщения.Информация);
				#КонецЕсли
				файл.Пометка=ИмпортЧеков(файл.ПолноеИмя, файл.Проведение);
				
			КонецЕсли; 
		КонецЦикла; 
		
		
		
	Иначе	
		ФАЙЛЫ=Новый ТаблицаЗначений;
		ФАЙЛЫ.Колонки.Добавить("База");
		ФАЙЛЫ.Колонки.Добавить("ПолноеИмя");
		ФАЙЛЫ.Колонки.Добавить("Подразделение");
		ФАЙЛЫ.Колонки.Добавить("Дата");
		ФАЙЛЫ.Колонки.Добавить("Касса");
		ФАЙЛЫ.Колонки.Добавить("НомерСтроки");
		ФАЙЛЫ.Колонки.Добавить("Прием");
		ФАЙЛЫ.Колонки.Добавить("Проведение");
		ФАЙЛЫ.Колонки.Добавить("РеализацияККМ");
		
		ФАЙЛЫ.Очистить();
		к = "\\Server-Home\Common\Ftp\Import"; // Константы.КаталогЗагрузки.Получить();
///++++	Тест mike Yushkov 14.02.2019
		Если Отладка Тогда 
		к = "C:\obmen\arc"; 
		КонецЕсли ;
//+++	
		
		//!!!!!		 к = "\\Server-Home\Common\Ftp\Arhiv";
		
		фф=НайтиФайлы(к,"rep*.rar");
		ф2=НайтиФайлы(к,"rep*.zip");
		
		//Инфо="1:"+ф2.Количество()+":"+ фф.Количество() +":"+ Проверить_СуществованиеКаталога(к) +":"+Пользователь_ОС();
		//Возврат;
		Если фф.Количество()>0 тогда
			ЗапуститьПриложение( к+"\exkassa\rar.exe e -y "+к+"\*.rar "+к+"\",,Истина );
			Для А=0 По фф.Количество()-1 Цикл
				ф = фф[А].ПолноеИмя;
				ф = Лев(ф,СтрДлина(ф)-3)+"dbf";
				ф = Новый Файл( ф );
				Если ф.Существует() Тогда
					//Команда_Системы( "del /q "+к+"\"+фф[А].Имя, К+"\");
					Попытка
						УдалитьФайлы(к+"\"+фф[А].Имя);
					Исключение
					КонецПопытки;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ф2.Количество()>0 тогда
			мф= НайтиФайлы(к,"*.zip");
			Для Каждого м Из мф Цикл
				ЗипФайл  = Новый ЧтениеZipФайла(м.ПолноеИмя);
				ЗипФайл.ИзвлечьВсе(к+"\");
				ЗипФайл.Закрыть();
			КонецЦикла;
			Для А=0 По ф2.Количество()-1 Цикл
				ф = ф2[А].ПолноеИмя;
				ф = Лев(ф,СтрДлина(ф)-3)+"dbf";
				ф = Новый Файл( ф );
				Если ф.Существует() Тогда
					//Команда_Системы( "del /q "+к+"\"+ф2[А].Имя, К+"\");
					Попытка
						УдалитьФайлы(к+"\"+ф2[А].Имя);
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		УдалитьФайлы(к +"\","prh*.*");
		УдалитьФайлы(к +"\","rpt*.*");
		УдалитьФайлы(к +"\","cli*.*");
		УдалитьФайлы(к +"\","pay*.*");
		
		Сч = 1;
		ФБД=НайтиФайлы(к,"rep*.dbf");
		Если ФБД.Количество()>0 Тогда
			Для А=0 По ФБД.Количество()-1 Цикл
				
				НСтр=ФАЙЛЫ.Добавить();
				
				_ИмяРабочегоФайла= КаталогВременныхФайлов() +"rKKM.dbf";
				КопироватьФайл(ФБД[А].ПолноеИмя,_ИмяРабочегоФайла);
				XBase  = Новый XBase;
				XBase.Кодировка = КодировкаXBase.ANSI;
				Попытка
					XBase.ОткрытьФайл(_ИмяРабочегоФайла);
				Исключение
					Продолжить;
				КонецПопытки;
				Рез = XBase.Первая();
				Попытка
					Т_Касса=Справочники.Кассы.НайтиПоРеквизиту("ЗаводскойН",XBase.KASSA);
					мс=СтрокуВМассив(ФБД[А].ПолноеИмя,"_");
					й="rep_"+мс[мс.Количество()-2]+"_"+мс[мс.Количество()-1];
					Т_Дата=Дата(Сред(й,5,2)+"."+Сред(й,7,2)+"."+Сред(й,9,4)+" "+Сред(й,14,2)+":"+Сред(й,16,2)+":"+Сред(й,18,2));
				Исключение
					Попытка
						Т_Дата=XBase.DATEO;
					Исключение
						#Если Сервер Тогда
							ЗаписьЖурналаРегистрации("ДатьЗагрузкуИзТоргСервиса_ОшибкаРасшифровкиДаты", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());  
						#Иначе
							Сообщить(ОписаниеОшибки());
						#КонецЕсли
					КонецПопытки;	
				КонецПопытки; 
				//определим склад 
				Т_Склады=РегистрыСведений.ПодразделениеУКассы.СрезПоследних(Т_Дата,Новый Структура("Касса",Т_Касса));
				Если Т_Склады.Количество()>0 Тогда
					Т_Склад=Т_Склады[0].ПодразделениеСклад;
					Т_Подразделение=Т_Склад.Подразделение;
				КонецЕсли;
				XBase.ЗакрытьФайл();
				
				НСтр.База=СокрЛП(ФБД[А].Имя);
				НСтр.ПолноеИмя = ФБД[А].ПолноеИмя;
				НСтр.Подразделение = Т_Подразделение;
				НСтр.Дата = Т_Дата;
				НСтр.Касса = Т_Касса;
				НСтр.НомерСтроки = Сч;
				
				р=НайтиДок(Т_Дата, Т_Подразделение);
				Если р=Неопределено Тогда
					НСтр.Прием = Истина;
					НСтр.Проведение = Истина;
				Иначе
					НСтр.РеализацияККМ=р;
				КонецЕсли;	
				
				Сч=Сч+1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		
		Для каждого файл Из ФАЙЛЫ Цикл
			
			Если НЕ Строка(файл.РеализацияККМ)="" Тогда
				д=файл.РеализацияККМ.ПолучитьОбъект();
				д.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				д.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
//+++			
		//	РаботаССервером.ИмпортЧеков(файл.ПолноеИмя, Истина);
			ИмпортЧеков(файл.ПолноеИмя, Истина);
//+++			
			
		КонецЦикла; 
		
	КонецЕсли;	
	
КонецПроцедуры 

//////////////////
Отладка = Истина ; 
